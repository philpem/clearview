
#include "stdlib.h"
#include "stdarg.h"
#include "string.h"
#include "stdio.h"
#include "ctype.h"

#include "os.h"
#include "bbc.h"
#include "wimpt.h"
#include "xferrecv.h"
#include "flex.h"
#include "msgs.h"
#include "visdelay.h"
#include "res.h"
#include "werr.h"
#include "sprite.h"
#include "drawfdiag.h"
#include "font.h"
#include "swis.h"

#include "Reader.h"
#include "Control.h"
#include "Owner.h"

#define DATABLOCK (cli?4096:1024)
#define Euclid_Expand 0x80654

#define NOCTRACE

#ifdef CTRACE
#define tstr(x) printf(x"\n");
#else
#define tstr(x)
#endif



/********************************************************************/
/* Flex management routines for extension in chunks */

BOOL blockflex_initblock(flex_ptr p,int blocksize)
{
BOOL success;

success=rflex_alloc(p,blocksize+4);
if(success)
  **(int**)p=0;
else
  *p=NULL;
return(success);
}

int blockflex_allocated(flex_ptr p)
{
return(**(int**)p);
}

void blockflex_trimblock(flex_ptr p)
{
int  size;
char *c;

size=blockflex_allocated(p);
c=*(char**)p;
memmove(c,c+4,size);
rflex_extend(p,size);
}

BOOL blockflex_allocate(flex_ptr p,int size,int blocksize)
{
int space,alloc,free;

space=rflex_size(p)-4;
alloc=blockflex_allocated(p);
free=space-alloc;
if(free<size)
  {
  int t;

  t=(size-free)/blocksize+1;
  if(!rflex_extend(p,space+4+t*blocksize))
    return(FALSE);
  }
**(int**)p+=size;
return(TRUE);
}

void *blockflex_address(flex_ptr p)
{
return((void*)(((int)*p)+4));
}

BOOL blockflex_padtoword(flex_ptr p,int blocksize)
{
int  m;

m=blockflex_allocated(p)%4;
if(m)
 {
 char *t;

 m=4-m;
 if(!blockflex_allocate(p,m,blocksize)) return(FALSE);
 t=(char*)blockflex_address(p)+blockflex_allocated(p)-1;
 while(m--) *t--=0;
 }
return(TRUE);
}

/********************************************************************/
/* generally useful routines (ie library stuff) */

os_error *get_file_type(char *filename,int *type)
{
os_filestr f;

f.action=17;
f.name=filename;
ERROUT(os_file(&f));
if(f.action==0) return(errorgenv(13,filename));
if(f.action==2) return(errorgenv(14,filename));
*type=((f.loadaddr)>>8)&0xfff;
return(NULL);
}

os_error *get_file_size(char *filename,int *size)
{
os_filestr f;

f.action=17;
f.name=filename;
ERROUT(os_file(&f));
*size=f.start;
return(NULL);
}

os_error *load_file_at(char *filename,void *address)
{
os_filestr f;

f.action=16;
f.name=filename;
f.loadaddr=(int)address;
f.execaddr=0;
return(os_file(&f));
}

os_error *load_file_into_flex(char *filename,flex_ptr anchor)
{
int        size;
os_error   *e;

ERROUT(get_file_size(filename,&size))
if(!rflex_alloc(anchor,size))
  {
  *anchor=NULL;
  return(errorgen(0));
  }
e=load_file_at(filename,*anchor);
if(e)
  {
  e=errorgen((int)e);
  rflex_free(anchor);
  return(e);
  }
return(NULL);
}

char *uppercase(char *p)
{
char *p1=p;

while(*p)
  {
  *p=toupper(*p);
  p++;
  }
return(p1);
}

os_error *get_sprite_size(sprite_area *area,sprite_id *sprite,int *w,int *h)
{
sprite_info info;

ERROUT(sprite_readsize(area,sprite,&info));
*w=info.width<<bbc_modevar(info.mode,4);
*h=info.height<<bbc_modevar(info.mode,5);
return(NULL);
}

/********************************************************************/
/* routines unique to compiling version */

#if COMPILE

#define EXTRAWID 284

typedef struct
  {
  int   command;
  char  param1[100];
  char  param2[100];
  char  param3[100];
  } commandstr;

typedef enum
  {
  C_FONT,
  C_INDEX,
  C_TOPIC,
  C_F,
  C_PICTURE,
  C_B,
  C_DEFINE,
  C_TAB,
  C_REF,
  C_BOX,
  C_BRACKET,
  C_RULE
  } commandnumber;

#define FILETYPE_DRAW 0xaff
#define FILETYPE_SPRITE 0xff9
#define FILETYPE_FILM 0xd6a

void comp_expandname(char *buffer,char *leaf,char *path)
{
if(strchr(leaf,':') || strchr(leaf,'$') || strchr(leaf,'&'))
  strcpy(buffer,leaf);
else
  {
  char *p;

  strcpy(buffer,path);
  p=strchr(buffer,0);
  while(p>buffer && *p!='.' && *p!=':') p--;
  if(*p=='.' || *p==':') p++;
  *p=0;
  if(strlen(leaf)+(p-buffer)<255)
    strcpy(p,leaf);
  }
}

os_error *comp_sizepic(flex_ptr dataflex,h_pictdef *pict)
{
switch(pict->type)
  {
  case FILETYPE_DRAW:
    {
    draw_diag  diag;
    draw_box   box;
    draw_error error;

    diag.data=(char*)((int)blockflex_address(dataflex)+pict->offset);
    diag.length=pict->size;
    if(!draw_verify_diag(&diag,&error))
      {
      if(error.type==DrawOSError)
        return(errorgen((int)&error.err.os));
      else
        {
        os_error e;

        e.errnum=99;
        sprintf(e.errmess,"Draw error %d at location %d in Draw file",
                error.err.draw.code,error.err.draw.location);
        return(errorgen((int)&e));
        }
      }
    draw_queryBox(&diag,&box,FALSE);
    if(box.x0 || box.y0)
      draw_shift_diag(&diag,-box.x0,-box.y0);
    draw_queryBox(&diag,&box,TRUE);
    pict->height=box.y1;
    pict->width=box.x1;
    }
    break;
  case FILETYPE_SPRITE:
    {
    sprite_area *area;
    sprite_id   sprite;

    area=(sprite_area*)((int)blockflex_address(dataflex)+pict->offset-4);
    sprite.tag=sprite_id_addr;
    sprite.s.addr=(sprite_ptr)((int)area+area->sproff);
    ERROUT(get_sprite_size(area,&sprite,&(pict->width),&(pict->height)));
    }
    break;
  case FILETYPE_FILM:
    {
    sprite_area *area;
    sprite_id   sprite;
    int         *p;

    p=(int*)((int)blockflex_address(dataflex)+pict->offset);
    area=(sprite_area*)((int)p+*p+8);
    sprite.tag=sprite_id_addr;
    sprite.s.addr=(sprite_ptr)((int)area+area->sproff);
    ERROUT(get_sprite_size(area,&sprite,&(pict->width),&(pict->height)));
    }
    break;
  default:
    return(errorgen(5));
  }
return(NULL);
}

void comp_getparam(char **start,char *end,char *param)
{
char *p;

p=param;
*p=0;
while(*start<=end && p<param+99 && 
      **start && **start!=10 && **start!='}' && **start!=',')
  *p++=*(*start)++;
*p=0;
if(*start<=end && **start==',') (*start)++;
}

void comp_getcommand(char **start,char *end,commandstr *c)
{
int  i;
char command[50];
char *p;
char *commandnames[]=
  {
  "FONT",
  "INDEX",
  "TOPIC",
  "F",
  "PICTURE",
  "B",
  "DEFINE",
  ">",
  "REF",
  "BOX",
  "{",
  "RULE"
  };

(*start)++;
p=command;
*p=0;
c->command=-1;
c->param1[0]=0;
c->param2[0]=0;
c->param3[0]=0;
while(*start<=end && p<command+49 && 
      **start && **start!=10 && **start!=':' && **start!='}')
  *p++=*(*start)++;
*p=0;
if(*start<=end && **start==':') (*start)++;
if(p==command) return;
uppercase(command);
strcpy(c->param1,command);
for(i=0;i<SIZEOFARRAY(commandnames);i++)
  if(!strcmp(commandnames[i],command)) c->command=i;
if(c->command<0) return;
comp_getparam(start,end,c->param1);
comp_getparam(start,end,c->param2);
comp_getparam(start,end,c->param3);
while(*start<=end && **start && **start!=10 && **start!='}') (*start)++;
if(*start<=end) (*start)++;
if(c->command==C_TAB)
  while(*start<=end && **start==' ')
    (*start)++;
}

os_error *comp_buildfonts(text_header *header,char **source,
                          flex_ptr dataflex)
{
char       *p;
char       *end;
commandstr c;
int        nfonts,space,i,offset;
h_fontdef  fonts[MAXFONTS];
char       fontname[MAXFONTS][100];

offset=blockflex_allocated(dataflex);
fonts[0].number=0;
fonts[0].pointsize=14;
strcpy(fontname[0],"Trinity.Medium");
nfonts=1;
p=*source;
end=p+rflex_size((flex_ptr)source)-1;
while(p<=end)
  {
  if(*p=='{')
    {
    int cstart=p-*source;

    comp_getcommand(&p,end,&c);
    if(c.command<0)
      return(errorgenv(0,c.param1,cstart));
    if(c.command==C_FONT)
      {
      int fnum,fsize;

      fnum=atoi(c.param1);
      fsize=atoi(c.param3);
      if(fnum>255 || fnum<0)
        return(errorgenv(2,fnum,cstart));
      if(fsize<3 || fsize>99)
        return(errorgenv(15,fnum,cstart));
      for(i=0;i<nfonts;i++)
        if(fonts[i].number==fnum)
          return(errorgenv(15,fnum,cstart));
      if(nfonts==MAXFONTS) return(errorgen(1));
      fonts[nfonts].number=fnum;
      fonts[nfonts].pointsize=fsize;
      strcpy(fontname[nfonts],c.param2);
      nfonts++;
      }
    }
  else
    p++;
  }
space=nfonts*sizeof(h_fontdef);
for(i=0;i<nfonts;i++) space+=strlen(fontname[i])+1;
if(!blockflex_allocate(dataflex,space,DATABLOCK)) return(errorgen(0));
p=(char*)blockflex_address(dataflex)+offset;
for(i=0;i<nfonts;i++)
  {
  *(h_fontdef*)p=fonts[i];
  p+=sizeof(h_fontdef);
  }
for(i=0;i<nfonts;i++)
  {
  strcpy(p,fontname[i]);
  p+=strlen(fontname[i])+1;
  }
if(!blockflex_padtoword(dataflex,DATABLOCK)) return(errorgen(0));
header->szfonts=nfonts;
header->offonts=offset;
return(NULL);
}

os_error *comp_buildtopics(text_header *header,char **source,
                           flex_ptr dataflex)
{
char       *p;
char       *end;
commandstr c;
int        i,offset,ntopics,topicflags;
int        index;
h_topicdef topic;

tstr(">>comp_buildtopics")
ntopics=0;
topicflags=0;
index=-1;
offset=blockflex_allocated(dataflex);
p=*source;
end=p+rflex_size((flex_ptr)source)-1;
while(p<=end)
  {
  if(*p=='{')
    {
    int cstart=p-*source;

    comp_getcommand(&p,end,&c);
    if(c.command==C_TOPIC)
      {
      char *t;
      int  o;
      char uptopic[100],upkey[100];

      strcpy(upkey,c.param1);
      uppercase(upkey);
      t=(char*)blockflex_address(dataflex)+offset;
      for(i=0;i<ntopics;i++)
        {
        strcpy(uptopic,t);
        if(!strcmp(uptopic,upkey))
          return(errorgenv(3,t,cstart));
        t+=strlen(t)+1;
        }
      o=blockflex_allocated(dataflex);
      blockflex_allocate(dataflex,strlen(c.param1)+1,DATABLOCK);
      t=(char*)blockflex_address(dataflex)+o;
      strcpy(t,c.param1);
      if(!strcmp(upkey,"INDEX")) index=ntopics;
      ntopics++;
      }
    else
      if(!ntopics && c.command!=C_FONT && c.command!=C_F)
        return(errorgen(4));
    }
  else
    {
    p++;
    if(!ntopics) return(errorgen(3));
    }
  }
tstr("scan finished")
if(index<0) return(errorgen(2));
if(!blockflex_allocate(dataflex,ntopics*sizeof(h_topicdef),DATABLOCK))
  return(errorgen(0));
tstr("flex allocated")
p=(char*)blockflex_address(dataflex)+offset;
memmove(p+ntopics*sizeof(h_topicdef),p,offset);
tstr("header moved")
for(i=0;i<ntopics;i++)
  {
  topic.offset=-1;
  topic.flags=topicflags;
  *(h_topicdef*)p=topic;
  p+=sizeof(h_topicdef);
  }
tstr("topics written")
if(!blockflex_padtoword(dataflex,DATABLOCK)) return(errorgen(0));
tstr("block padded")
header->sztopics=ntopics;
header->oftopics=offset;
header->indextopic=index;
tstr("topics done")
return(NULL);
}

os_error *comp_buildindex(text_header *header,char **source,
                          flex_ptr dataflex)
{
char       *p;
char       *end;
commandstr c;
int        i,offset,ntags;

ntags=0;
offset=blockflex_allocated(dataflex);
p=*source;
end=p+rflex_size((flex_ptr)source)-1;
while(p<=end)
  {
  if(*p=='{')
    {
    int cstart=p-*source;

    comp_getcommand(&p,end,&c);
    if(c.command==C_INDEX || c.command==C_TOPIC)
      {
      char *t;
      int  o,insert,cmp;
      char new[21],comp[21];

      insert=-1;
      strncpy(new,c.param1,20);
      new[20]=0;
      uppercase(new);
      t=(char*)blockflex_address(dataflex)+offset+ntags*sizeof(h_indexdef);
      for(i=0;i<ntags;i++)
        {
        strcpy(comp,t);
        uppercase(comp);
        cmp=strcmp(new,comp);
        if(!cmp) return(errorgenv(4,t,cstart));
        if(cmp<0 && insert<0) insert=i;
        t+=strlen(t)+1;
        }
      if(insert<0) insert=ntags;
      if(c.command!=C_TOPIC)
        {
        t=(char*)blockflex_address(dataflex)+header->oftopics;
        t+=sizeof(h_topicdef)*header->sztopics;
        for(i=0;i<header->sztopics;i++);
          {
          strncpy(comp,t,20);
          comp[20]=0;
          uppercase(comp);
          if(!strcmp(new,comp))
            return(errorgenv(5,t,cstart));
          t+=strlen(t)+1;
          }
        }
      o=blockflex_allocated(dataflex);
      strncpy(new,c.param1,20);
      new[20]=0;
      if(!blockflex_allocate(dataflex,strlen(new)+1+sizeof(h_indexdef),
                             DATABLOCK))
        return(errorgen(0));
      ntags++;
      if(insert>=0)
        {
        int chunk=offset+insert*sizeof(h_indexdef);

        t=(char*)blockflex_address(dataflex)+chunk;
        memmove(t+sizeof(h_indexdef),t,o-chunk);
        }
      else
        t=(char*)blockflex_address(dataflex)+offset+
          (ntags-1)*sizeof(h_indexdef);
      ((h_indexdef*)t)->offset=-1;
      if(insert>=0)
        {
        int chunk=offset+ntags*sizeof(h_indexdef);
        t=(char*)blockflex_address(dataflex)+chunk;
        while(insert--) t+=strlen(t)+1;
        chunk=o-(t-(char*)blockflex_address(dataflex)-sizeof(h_indexdef));
        memmove(t+strlen(new)+1,t,chunk);
        }
      else
        t=(char*)blockflex_address(dataflex)+o+sizeof(h_indexdef);
      strcpy(t,new);
      }
    }
  else
    p++;
  }
if(!blockflex_padtoword(dataflex,DATABLOCK)) return(errorgen(0));
header->szindex=ntags;
header->ofindex=offset;
return(NULL);
}

os_error *comp_builddict(text_header *header,char **source,
                         flex_ptr dataflex)
{
/* no dictionary in this version */
if(!blockflex_padtoword(dataflex,DATABLOCK)) return(errorgen(0));
header->szdict=0;
header->ofdict=0;
return(NULL);
}

os_error *comp_buildpics(text_header *header,char **source,
                         flex_ptr dataflex,flex_ptr pictflex,char *filename)
{
char       *p;
char       *end;
commandstr c;
h_pictdef  pict,*ppict;
char       pathname[256];
int        i,npics,o,offset;

if(!blockflex_initblock(pictflex,DATABLOCK)) return(errorgen(0));
offset=blockflex_allocated(dataflex);
p=*source;
end=p+rflex_size((flex_ptr)source)-1;
pict.height=pict.width=pict.type=pict.size=0;
npics=0;
while(p<=end)
  {
  if(*p=='{')
    {
    int cstart=p-*source;

    comp_getcommand(&p,end,&c);
    if(c.command==C_PICTURE)
      {
      char *t,*e;
      int  n,l;

      if(strlen(c.param1)!=1 || !strchr("ILRC",toupper(*c.param1)))
        return(errorgenv(7,c.param1,cstart));
      comp_expandname(pathname,c.param2,filename);
      t=(char*)blockflex_address(pictflex);
      e=t+blockflex_allocated(pictflex)-1;
      n=0;
      l=1;
      while(t<e && !n)
        {
        if(!strcmp(t,pathname))
          n=l;
        else
          {
          l++;
          t+=strlen(t)+1;
          }
        }
      if(n)
        {
        l=0;
        ppict=(h_pictdef*)((int)blockflex_address(dataflex)+offset);
        while(n>1)
          {
          do
            {
            l++;
            ppict++;
            } while(ppict->offset>=0);
          n--;
          }
        pict.offset=l;
        }
      else
        {
        pict.offset=-1;
        l=blockflex_allocated(pictflex);
        if(!blockflex_allocate(pictflex,strlen(pathname)+1,DATABLOCK))
          return(errorgen(0));
        strcpy((char*)blockflex_address(pictflex)+l,pathname);
        }
      l=blockflex_allocated(dataflex);
      if(!blockflex_allocate(dataflex,sizeof(h_pictdef),DATABLOCK))
        return(errorgen(0));
      *(h_pictdef*)((int)blockflex_address(dataflex)+l)=pict;
      npics++;
      }
    }
  else
    p++;
  }
o=0;
for(i=0;i<npics;i++)
  {
  ppict=(h_pictdef*)((int)blockflex_address(dataflex)+offset);
  ppict+=i;
  if(ppict->offset>=0)
    {
    h_pictdef *ppict1;

    ppict1=(h_pictdef*)((int)blockflex_address(dataflex)+offset);
    ppict1+=ppict->offset;
    pict=*ppict1;
    }
  else
    {
    os_error *e;

    strcpy(pathname,(char*)blockflex_address(pictflex)+o);
    o+=strlen(pathname)+1;
    pict.offset=blockflex_allocated(dataflex);
    e=get_file_type(pathname,&pict.type);
    if(!e) e=get_file_size(pathname,&pict.size);
    if(!e && !blockflex_allocate(dataflex,pict.size,DATABLOCK))
      return(errorgen(0));
    if(!e) e=load_file_at(pathname,
              (void*)((int)blockflex_address(dataflex)+pict.offset));
    if(!e && pict.type==FILETYPE_FILM)
      {
      int         w,h,m,s,*p,bpp;
      sprite_area *sa;

      p=(int*)((int)blockflex_address(dataflex)+pict.offset);
      s=4-((*p)%4);
      if(s!=4)
        {
        if(!blockflex_allocate(dataflex,s,DATABLOCK)) return(errorgen(0));
        p=(int*)((int)blockflex_address(dataflex)+pict.offset);
        pict.size+=s;
        *p+=s;
        }
      m=*(p+7);
      w=*(p+5)/(1<<bbc_modevar(m,bbc_XEigFactor));
      h=*(p+6)/(1<<bbc_modevar(m,bbc_YEigFactor));
      bpp=(1<<bbc_modevar(m,bbc_Log2BPP));
      s=(w*h)*bpp/8;
      if((w*bpp/8)%4) s+=h*(4-((w*bpp/8)%4));
      s+=sizeof(sprite_area)+sizeof(sprite_header)+8;
      if(!blockflex_allocate(dataflex,s,DATABLOCK)) return(errorgen(0));
      p=(int*)((int)blockflex_address(dataflex)+pict.offset);
      pict.size+=s;
      sa=(sprite_area*)((int)p+*p+8);
      sa->size=s-8;
      sa->number=0;
      sa->sproff=0;
      sa->freeoff=sizeof(sprite_area);
      sprite_area_initialise(sa,s-8);
      if(!e) e=sprite_create(sa,"frame",sprite_nopalette,w,h,m);
      *(int*)((int)p+*p+0)=*(p+4); /* offset to next frame */
      *(int*)((int)p+*p+4)=0;       /* decompression value for R2 */
      if(!e) e=project_next_frame(p);
      }
    if(!e && !blockflex_padtoword(dataflex,DATABLOCK)) return(errorgen(0));
    if(!e) e=comp_sizepic(dataflex,&pict);
    if(e)
      {
      char mess[252];

      strcpy(mess,e->errmess);
      return(errorgenv(6,pathname,mess));
      }
    }
  ppict=(h_pictdef*)((int)blockflex_address(dataflex)+offset);
  ppict+=i;
  *ppict=pict;
  }
header->ofpics=offset;
return(NULL);
}

os_error *comp_addchar(flex_ptr dataflex,int *offset,char c)
{
if(!blockflex_allocate(dataflex,1,DATABLOCK)) return(errorgen(0));
*((char*)blockflex_address(dataflex)+*offset)=c;
(*offset)++;
return(NULL);
}

os_error *comp_addstr(flex_ptr dataflex,int *offset,char *s)
{
int l=strlen(s);

if(!blockflex_allocate(dataflex,l,DATABLOCK)) return(errorgen(0));
memcpy((char*)blockflex_address(dataflex)+*offset,s,l);
*offset+=l;
return(NULL);
}

os_error *comp_addbuf(flex_ptr dataflex,int *offset,char *s,int l)
{
if(!blockflex_allocate(dataflex,l,DATABLOCK)) return(errorgen(0));
memcpy((char*)blockflex_address(dataflex)+*offset,s,l);
*offset+=l;
return(NULL);
}

int comp_topicnum(text_header *header,flex_ptr dataflex,char *key)
{
int  topic,n;
char *t;
char upkey[100],uptopic[100];

strcpy(upkey,key);
uppercase(upkey);
t=(char*)((int)blockflex_address(dataflex)+header->oftopics+
               header->sztopics*sizeof(h_topicdef));
topic=-1;
n=0;
while(topic<0 && n<header->sztopics)
  {
  strcpy(uptopic,t);
  uppercase(uptopic);
  t+=strlen(t)+1;
  if(!strcmp(upkey,uptopic)) topic=n;
  n++;
  }
return(topic);
}

int comp_indexnum(text_header *header,flex_ptr dataflex,char *key)
{
int  index,n;
char *t;
char upkey[21],upindex[21];

strncpy(upkey,key,20);
upkey[20]=0;
uppercase(upkey);
t=(char*)((int)blockflex_address(dataflex)+header->ofindex+
               header->szindex*sizeof(h_indexdef));
index=-1;
n=0;
while(index<0 && n<header->szindex)
  {
  strcpy(upindex,t);
  uppercase(upindex);
  t+=strlen(t)+1;
  if(!strcmp(upkey,upindex)) index=n;
  n++;
  }
return(index);
}

os_error *comp_buildtext(text_header *header,char **source,
                         flex_ptr dataflex,flex_ptr pictflex,char *filename)
{
char       *p;
char       *end;
commandstr c;
int        offset,minwidth;
int        currentchar,currentpic;
BOOL       boxing,fontchange,fontchanged;
char       tempstr[100];

minwidth=0;
offset=blockflex_allocated(dataflex);
p=*source;
end=p+rflex_size((flex_ptr)source)-1;
currentpic=header->ofpics;
currentchar=offset;
boxing=fontchanged=FALSE;
while(p<=end)
  {
  fontchange=FALSE;
  if(*p=='{')  /* } */
    {
    int cstart=p-*source;

    comp_getcommand(&p,end,&c);
    switch(c.command)
      {
      case C_FONT:
        break;
      case C_INDEX:
        {
        int  index,ofindex;

        index=comp_indexnum(header,dataflex,c.param1);
        ofindex=header->ofindex+index*sizeof(h_indexdef);
        ((h_indexdef*)((int)blockflex_address(dataflex)+ofindex))->offset=
          currentchar;
        }
        break;
      case C_TOPIC:
        {
        int  topicpos,topic,oftopic;
        int  index,ofindex;

        topic=comp_topicnum(header,dataflex,c.param1);
        oftopic=header->oftopics+topic*sizeof(h_topicdef);
        if(boxing)
          {
          ERROUT(comp_addstr(dataflex,&currentchar,"\025B"))
          ERROUT(comp_addchar(dataflex,&currentchar,0))
          boxing=fontchanged=FALSE;
          }
        topicpos=currentchar;
        if(fontchanged) topicpos-=7;
        ERROUT(comp_addstr(dataflex,&currentchar,c.param1))
        ((h_topicdef*)((int)blockflex_address(dataflex)+oftopic))->offset=
          topicpos;
        index=comp_indexnum(header,dataflex,c.param1);
        if(index>=0)
          {
          ofindex=header->ofindex+index*sizeof(h_indexdef);
          ((h_indexdef*)((int)blockflex_address(dataflex)+ofindex))->offset=
            currentchar;
          }
        }
        break;
      case C_F:
        {
        int       font,fontnum,i;
        h_fontdef *f;

        font=atoi(c.param1);
        i=0;
        f=(h_fontdef*)((int)blockflex_address(dataflex)+header->offonts);
        fontnum=-1;
        while(fontnum<0 && i<header->szfonts)
          {
          if(f->number==font) fontnum=i;
          f++;
          i++;
          }
        if(fontnum<0) return(errorgenv(10,c.param1,cstart));
        sprintf(tempstr,"\032?\025F%02x",fontnum);
        ERROUT(comp_addstr(dataflex,&currentchar,tempstr))
        ERROUT(comp_addchar(dataflex,&currentchar,0))
        fontchange=TRUE;
        break;
        }
      case C_PICTURE:
        {
        h_pictdef   *pict;
        int         wid;

        pict=(h_pictdef*)((int)blockflex_address(dataflex)+currentpic);
        if(toupper(c.param1[0])=='I')
          {
          static char buffer[]={9,0,0,0,21,'P','x','x','x','x',
                                'y','y','y','y','y','y',0};
          int         pw=pict->width;
          int         w,t;

          ERROUT(font_converttopoints(pw,0,&w,&t))
          buffer[1]=w&0xff;
          buffer[2]=(w&0xff00)>>8;
          buffer[3]=(w&0xff0000)>>16;
          sprintf(buffer+6,"%04x%06x",pict->height,currentpic);
          ERROUT(comp_addbuf(dataflex,&currentchar,buffer,sizeof(buffer)))
          }
        else
          {
          char ch;
          char info[15];

          if(*((char*)blockflex_address(dataflex)+currentchar)!=10)
            ERROUT(comp_addchar(dataflex,&currentchar,10))
          ERROUT(comp_addchar(dataflex,&currentchar,21))
          ch=toupper(c.param1[0]);
          if(ch=='L') ch='Q'; else if(ch=='C') ch='S';
          ERROUT(comp_addchar(dataflex,&currentchar,ch))
          pict=(h_pictdef*)((int)blockflex_address(dataflex)+currentpic);
          sprintf(info,"%04x%04x%06x",pict->height,pict->width,currentpic);
          ERROUT(comp_addstr(dataflex,&currentchar,info))
          ERROUT(comp_addchar(dataflex,&currentchar,10))
          }
        pict=(h_pictdef*)((int)blockflex_address(dataflex)+currentpic);
        wid=pict->width+(toupper(c.param1[0])=='C'?0:EXTRAWID);
        if(minwidth<wid) minwidth=wid;
        currentpic+=sizeof(h_pictdef);
        }
        break;
      case C_B:
        {
        char buffer[]={21,'K',0,9,0xc0,0x12,0};
        char buffer1[]={9,0xc0,0x12,0,21,'L',0};

        ERROUT(comp_addbuf(dataflex,&currentchar,buffer,sizeof(buffer)))
        ERROUT(comp_addstr(dataflex,&currentchar,c.param1))
        ERROUT(comp_addbuf(dataflex,&currentchar,buffer1,sizeof(buffer1)))
        if(strlen(c.param1)>12 || strchr(c.param1,' '))
          return(errorgenv(9,c.param1,cstart));
        }
        break;
      case C_DEFINE:
        {
        int         topic;
        static char buffer[]={25,USDEFPOS,USDEFSIZE};
        static char buffer1[]={25,0,0,21,'D','x','x','x','x',0};

        topic=comp_topicnum(header,dataflex,c.param2);
        if(topic<0) return(errorgenv(11,c.param2,cstart));
        ERROUT(comp_addbuf(dataflex,&currentchar,buffer,sizeof(buffer)))
        ERROUT(comp_addstr(dataflex,&currentchar,c.param1))
        sprintf(buffer1+5,"%04x",topic);
        ERROUT(comp_addbuf(dataflex,&currentchar,buffer1,sizeof(buffer1)))
        }
        break;
      case C_TAB:
        {
        static char buffer[]={' ',9,0,0,0,21,'T','x','x','x','x',0};
        int    tabpos;

        tabpos=7*atoi(c.param1);
        if(tabpos<1 || tabpos>1080) return(errorgenv(8,c.param1,cstart));
        if(minwidth<tabpos+EXTRAWID) minwidth=tabpos+EXTRAWID;
        sprintf(buffer+7,"%04x",tabpos);
        ERROUT(comp_addbuf(dataflex,&currentchar,buffer,sizeof(buffer)))
        }
        break;
      case C_REF:
        {
        int         index;
        static char buffer[]={25,USXREFPOS,USXREFSIZE};
        static char buffer1[]={25,0,0,21,'X','x','x','x','x',0};

        index=comp_indexnum(header,dataflex,c.param2);
        if(index<0) return(errorgenv(12,c.param2,cstart));
        ERROUT(comp_addbuf(dataflex,&currentchar,buffer,sizeof(buffer)))
        ERROUT(comp_addstr(dataflex,&currentchar,c.param1))
        sprintf(buffer1+5,"%04x",index);
        ERROUT(comp_addbuf(dataflex,&currentchar,buffer1,sizeof(buffer1)))
        }
        break;
      case C_BOX:
        boxing=!boxing;
        if(boxing)
          {
          if(*((char*)blockflex_address(dataflex)+currentchar)!=10)
            ERROUT(comp_addchar(dataflex,&currentchar,10))
          ERROUT(comp_addchar(dataflex,&currentchar,10))
          ERROUT(comp_addstr(dataflex,&currentchar,"\025B"))
          }
        else
          {
          ERROUT(comp_addstr(dataflex,&currentchar,"\025C"))
          if(*((char*)blockflex_address(dataflex)+currentchar)!=10)
            ERROUT(comp_addchar(dataflex,&currentchar,10))
          }
        ERROUT(comp_addchar(dataflex,&currentchar,10))
        ERROUT(comp_addchar(dataflex,&currentchar,0))
        break;
      case C_BRACKET:
        ERROUT(comp_addchar(dataflex,&currentchar,'{'))  /* } */
        break;
      case C_RULE:
        {
        static char buffer[]={21,'-',0};
        int    type;

        type=atoi(c.param1);
        if(type==2) buffer[1]='=';
        else if(type==1) buffer[1]='.';
             else buffer[1]='-';
        ERROUT(comp_addbuf(dataflex,&currentchar,buffer,sizeof(buffer)))
        }
      }
    }
  else
    {
    ERROUT(comp_addchar(dataflex,&currentchar,*p))
    p++;
    }
  fontchanged=fontchange;
  }
header->oftext=offset;
header->minwidth=minwidth>0?minwidth:10000;
return(NULL);
}

os_error *comp_parse(char **sourceptr,char *filename)
{
text_header header;
os_error    *e;
flex_ptr    dataflex,pictflex;
char        *pictnames;

tstr(">>comp_parse")
pictnames=NULL;
if(!cli) visdelay_begin();
e=NULL;
memset(&header,0,sizeof(header));
header.version=FILEVERSION;
header.currenttopic=-1;
strcpy(header.creator,owner_idstr());
dataflex=(flex_ptr)&dataptr;
pictflex=(flex_ptr)&pictnames;
if(!blockflex_initblock(dataflex,DATABLOCK)) e=errorgen(0);
if(!e && !blockflex_allocate(dataflex,sizeof(header),DATABLOCK))
  e=errorgen(0);
tstr("Initialised")
if(!e) e=comp_buildfonts(&header,sourceptr,dataflex);
tstr("Done fonts")
if(!e) e=comp_buildtopics(&header,sourceptr,dataflex);
tstr("Done topics")
if(!e) e=comp_buildindex(&header,sourceptr,dataflex);
tstr("Done index")
if(!e) e=comp_builddict(&header,sourceptr,dataflex);
tstr("Done dict")
if(!e) e=comp_buildpics(&header,sourceptr,dataflex,pictflex,filename);
tstr("Done pics")
if(!e) e=comp_buildtext(&header,sourceptr,dataflex,pictflex,filename);
tstr("Done text")
if(pictnames) rflex_free(pictflex);
tstr("freed pictures")
if(!e)
  {
  header.filesize=blockflex_allocated(dataflex);
  *(text_header*)blockflex_address(dataflex)=header;
  blockflex_trimblock(dataflex);
  }
else
  text_destroy();
tstr("Tidied up, finished parsing")
if(!cli) visdelay_end();
return(e);
}

os_error *comp_compile(char *filename)
{
char     *sourceptr;
os_error *e;

tstr(">>comp_compile")
e=NULL;
text_destroy();
tstr("destroyed text")
ERROUT(load_file_into_flex(filename,(flex_ptr)&sourceptr))
tstr("loaded file")
e=comp_parse(&sourceptr,filename);
tstr("parsed")
if(sourceptr) rflex_free((flex_ptr)&sourceptr);
tstr("freed source")
if(!e && !cli) e=findfonts();
tstr("found fonts")
return(e);
}

#endif
/********************************************************************/

void comp_extract_param(char **inbuf,char *outbuf,int bufsz)
{
int i;

i=0;
while(**inbuf>31 && **inbuf!=',' && i<bufsz-1) outbuf[i++]=*((*inbuf)++);
if(**inbuf) {**inbuf=0; (*inbuf)++;}
outbuf[i]=0;
}

os_error *comp_textload(char *file,BOOL xfer)
{
int         i;
h_fontdef   *f;
os_error    *e=NULL;
char        opentag[100],filename[256],junk[30],*p;

help_provider[0]=opentag[0]=o_x0=o_y0=o_x1=o_y1=0;
p=strchr(file,' ');
if(p)
  {
  *p++=0;
  comp_extract_param(&p,opentag,sizeof(opentag));
  comp_extract_param(&p,help_provider,sizeof(help_provider));
  comp_extract_param(&p,junk,sizeof(junk)); o_x0=atoi(junk);
  comp_extract_param(&p,junk,sizeof(junk)); o_y0=atoi(junk);
  comp_extract_param(&p,junk,sizeof(junk)); o_x1=atoi(junk);
  comp_extract_param(&p,junk,sizeof(junk)); o_y1=atoi(junk);
  if(owner_validstr(help_provider))
    {
    p=strchr(help_provider,'{');
    if(p)
      {
      p--;
      while(p>help_provider && *p==' ') p--;
      *++p=0;
      }
    }
  else
    {
    help_provider[0]=opentag[0]=o_x0=o_y0=o_x1=o_y1=0;
    return(NULL); /* illegal open attempted - ignore */
    }
  }
strcpy(filename,file);
/*
e=os_swi3(OS_GSTrans|XOS_Bit,(int)file,(int)filename,sizeof(filename));
*/
if(!e && strcmp(filename,pathname))
  {
  if(dataptr) rflex_free((flex_ptr)&dataptr);
  if(lineptr) rflex_free((flex_ptr)&lineptr);
  e=load_file_into_flex(filename,(flex_ptr)&dataptr);
  if(!e)
    {
    f=(h_fontdef*)((int)dataptr+dataptr->offonts);
    for(i=0;i<dataptr->szfonts;i++,f++)
      f->handle=-1;
    dataptr->currenttopic=-1;
    e=findfonts();
    if(!xfer || xferrecv_file_is_safe())
      {
      strncpy(pathname,filename,255);
      pathname[255]=0;
      eversaved=TRUE;
      modified=FALSE;
      }
    else
      {
      eversaved=FALSE;
      modified=TRUE;
      strcpy(pathname,"BookFile");
      }
    queue_empty();
    }
  }
if(!e && opentag[0])
  {
  text_showwindow();
  p=(char*)dataptr+dataptr->ofindex+dataptr->szindex*sizeof(h_indexdef);
  for(i=0;i<dataptr->szindex;i++)
    {
    if(!strcmp(p,opentag))
      {
      h_indexdef *x;

      x=(h_indexdef*)((int)dataptr+dataptr->ofindex);
      x+=i;
      text_goto(x->offset);
      break;
      }
    else
      p+=strlen(p)+1;
    }
  if(!e) pane_greyicons();
  }
return(e);
}

void comp_fileload(BOOL open)
{
int   filetype;
char  *filename;

#ifdef CTRACE
bbc_vdu(26); bbc_vdu(4); printf("\n\n>>comp_fileload");
#endif
searchtextclose();
filetype=xferrecv_checkinsert(&filename);
if(filetype==OURTYPE)
  {
  xferrecv_insertfileok();
  if(wimpt_complain(comp_textload(filename,TRUE)))
    text_destroy();
  else
    if(!help_provider[0]) text_showwindow();
  }
#if COMPILE
else
  if(filetype==TEXTTYPE && !open)
    {
tstr("Text file detected")
    if(owner_oktype(2))
      {
      if(!wimpt_complain(comp_compile(filename)))
        {
tstr("compiled ok")
        queue_empty();
        eversaved=FALSE;
        modified=TRUE;
        strcpy(pathname,"BookFile");
        text_showwindow();
        }
      }
    xferrecv_insertfileok();
    }
#endif
text_settitle();
}

void comp_ramload(void)
{
searchtextclose();
}

void comp_init(void)
{
}
